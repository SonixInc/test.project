# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    locales: ['en', 'ru']
    max_jobs_on_homepage: 10
    max_jobs_on_category: 20
    companies_directory: '%kernel.project_dir%/public/uploads/companies'
    companies_web_directory: '/uploads/companies'
    max_per_page: 10
    stripe_pub_key: '%env(STRIPE_PUBLISHABLE_KEY)%'
    stripe_secret_key: '%env(STRIPE_SECRET_KEY)%'
    basic_subscribe_key: 'price_1Hf3HeA6grEwLRo5yLfhlMQQ'
    premium_subscribe_key: 'price_1HfLpJA6grEwLRo5Q8s5mICS'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    Redis:
        # you can also use \RedisArray, \RedisCluster or \Predis\Client classes
        class: Redis
        calls:
            - connect:
                  - '%env(REDIS_HOST)%'
                  - '%env(int:REDIS_PORT)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%companies_directory%'

    App\EventListener\CompanyUploadListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postLoad }

    App\EventListener\CompanyUserListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\SummaryUserListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\JobTokenListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\AffiliateTokenListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    Stripe\StripeClient:
        arguments: ['%stripe_secret_key%']