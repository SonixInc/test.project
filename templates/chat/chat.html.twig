{% extends 'base.html.twig' %}

{% block body %}
    <div class="row">
        <div class="col-4 bg-light">
            <div class="card">
                <div class="card-header"><h4>Chat</h4></div>
                <div class="card-body">
                    <div id="chat-output" class="chat">
                        {% for message in messages %}
                            <div>
                                <span class="dropdown">{{ message.user }}: </span>
                                <span data-message="{{ message.id }}">{{ message.content }}</span>
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ message.id) }}">
                                <button data-button="{{ message.id }}" class="delete-message">Delete</button>
                            </div>
                        {% endfor %}
                    </div>
                </div>
                <div class="card-footer">
                    <div class="form-group">
                        <input name="content" id="chat_input" class="form-control">
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        let delete_buttons = document.querySelectorAll('.delete-message');
        let conn = new ab.Session('ws://localhost:8080?token={{ token }}&chat={{ chat.id }}',
            function () {
                conn.subscribe('onNewMessage_{{ chat.id }}', function (topic, data) {
                    if (data.messageDelete) {
                        let message = document.querySelector('[data-message="' + data.messageId + '"]');
                        let button = document.querySelector('[data-button="' + data.messageId + '"]');
                        let wrapper = message.parentElement;

                        message.innerText = data.message;
                        wrapper.removeChild(button);
                    } else {
                        let wrapper = document.createElement('div');
                        let username = document.createElement('span');
                        let message = document.createElement('span');
                        let jar = document.createElement('button');
                        let tokenInput = document.createElement('input');

                        tokenInput.setAttribute('type', 'hidden');
                        tokenInput.setAttribute('name', '_token');
                        tokenInput.setAttribute('value', '{{ csrf_token('delete') }}')

                        message.dataset.message = data.messageId;

                        jar.classList.add('delete-message');
                        jar.dataset.button = data.messageId;

                        username.append(data.username + ': ');
                        message.append(data.message);
                        jar.append('Delete');

                        wrapper.append(username);
                        wrapper.append(message);
                        wrapper.append(tokenInput);
                        wrapper.append(jar);

                        addEvent(jar);

                        $('#chat-output').append(wrapper);
                    }
                });
            },
            function () {
                console.warn('WebSocket connection closed');
            },
            {'skipSubprotocolCheck': true}
        );

        $('#chat_input').on('keyup', function (e) {
            if (e.keyCode === 13 && !e.shiftKey) {
                let content = $(this).val();
                let xhr = new XMLHttpRequest();

                xhr.open('POST', '{{ path('chat.chat', {'id': chat.id}) }}');
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        let response = JSON.parse(xhr.responseText);

                        conn.publish(JSON.stringify({
                            message_id: response.message.id,
                            content: response.message.content,
                            username: response.user.username
                        }));
                    }
                }

                xhr.send('content=' + content);
                $(this).val('');
            }
        });

        delete_buttons.forEach(button => {
            addEvent(button);
        });

        function addEvent(button) {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                let message_id = this.dataset.button;
                let xhr = new XMLHttpRequest();
                let token = this.parentElement.querySelector('[name="_token"]').value;
                let url = '{{ path('chat.message.delete', {'id': chat.id, 'message_id': 0}) }}'

                url = url.replace('0', message_id);

                xhr.open('POST', url);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        conn.publish(JSON.stringify({
                            message_id: message_id,
                            event: 'delete',
                        }));
                    }
                }

                xhr.send('_method=DELETE&_token=' + token);
            });
        }

    </script>
{% endblock %}
